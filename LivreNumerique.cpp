/////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fichier: LivreNumerique.cpp
//	Auteur(s) : Charles - Olivier Favreau et Stéphanie Leclerc
//	Date de creation : 01 mars 2016
//	Date de modification : 03 mars 2016
//Description : Fonctions reliées à classe LivreNumerique
////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "LivreNumerique.h"


using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Le constructeur par défaut construit un objet de type LivreNumérique
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
LivreNumerique::LivreNumerique(){

};

////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Le constructeur par paramètres construit un objet de type LivreNumérique avec les attributs initialisés au valeurs des paramètres.
//@param FORMAT_DOCUMENT format (Référence)
//@param unsigned int tailleOctet (Référence)
//@param string lien (Référence)
//@param string cote (Référence)
//@param string titre (Référence)
//@param unsigned int annee (Référence)
//@param unsigned int ageMin (Référence)
//@param unsigned int nbExemplaires (Référence)
//@param string auteur (Référence)
//@param string genre (Référence)
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
LivreNumerique::LivreNumerique(FORMAT_DOCUMENT& format, unsigned int& tailleOctet, std::string& lien,
	const std::string& cote, const std::string& titre, unsigned int annee,
	unsigned int ageMin, unsigned int nbExemplaires, const std::string& auteur, const std::string& genre):Livre(cote,titre,annee, ageMin,nbExemplaires, auteur, genre), ObjetNumerique(){
	format_ = format;
	tailleOctet_ = tailleOctet;
	lien_ = lien;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Le destructeur libère la mémoire occupée par un objet de type LivreNumérique
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
LivreNumerique::~LivreNumerique(){

};

////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Retourne l'attribut format_ d'un objet de type LivreNumerique
//@return FORMAT_DOCUMENT
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
FORMAT_DOCUMENT LivreNumerique::obtenirFormat()const{
	return format_;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//Modifie l'attribut format_ d'un objet de type LivreNumerique
//@param FORMAT_DOCUMENT format (Référence)
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
void LivreNumerique::modifierFormat(FORMAT_DOCUMENT& format){
	format_ = format;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Retourne l'attribut tailleOctet_ d'un objet de type LivreNumerique
//@return unsigned int
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int LivreNumerique::obtenirTailleOctet()const{
	return tailleOctet_;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//Modifie l'attribut tailleOctets_ d'un objet de type LivreNumerique
//@param unsigned int tailleOctet (Référence)
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
void LivreNumerique::modifierTailleOctet(unsigned int tailleOctet){
	tailleOctet_ = tailleOctet;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Retourne l'attribut lien_ d'un objet de type LivreNumerique
//@return string
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string LivreNumerique::obtenirLien()const{
	return lien_;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//Modifie l'attribut lien_ d'un objet de type LivreNumerique
//@param string lien (Référence)
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
void LivreNumerique::modifierLien(std::string& lien){
	lien_ = lien;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Retourne un string indiquand le type de format d'un objet de type LivreNumerique
//@return string
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string LivreNumerique::obtenirFormatStr()const{
	switch (format_){
	case '0' :
		return "pdf";
		break;
	case '1' :
		return "epub";
		break;
	case '2':
		return "docx";
		break;
	case '3':
		return "txt";
		break;
	case '4':
		return "inconnu";
		break;
	}
};

////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// Recherche un mot clé (string) à travers les attributs d'un objet de type LivreNumérique et retourne vrai si un résulat est trouvé.
//@param string motsCle (Référence)
//@return bool
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
bool LivreNumerique::recherche(const std::string& motsCle) const{
	bool trouvé;
	std::size_t format = obtenirFormatStr().find(convertirMinuscule(motsCle));
	trouvé = Livre::recherche(motsCle) || (format != string::npos)  ;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// L'opérateur >> appelle la fonction rechercherObjetEmpruntable() en premant en paramètre un string passé par le istream
//@param ostream in (Référence)
//@param LivreNumerique livreNumerique (Référence)
//@return ostream in (Référence)
//
////////////////////////////////////////////////////////////////////////////////////////////////////////
ostream& operator<<(ostream& o, LivreNumerique& livreNumerique){
	o << "Objet Numérique: Taille: " << livreNumerique.tailleOctet_ << "Lien Internet: " << livreNumerique.lien_;
	o << Livre(livreNumerique);
	return o;
};





